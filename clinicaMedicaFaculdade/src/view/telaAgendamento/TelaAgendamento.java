package view.telaAgendamento;

import javax.swing.ImageIcon;
import contoller.AgendamentoController;
import static contoller.AgendamentoController.DadosMatrizAgendamento.*;
import java.awt.Color;
import java.awt.Component;
import java.sql.Time;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import view.telaBuscarPaciente.TelaBuscarPaciente;
import view.telaConsultaAgendamento.TelaConsulta;


public class TelaAgendamento extends javax.swing.JFrame {
    
    private final TelaBuscarPaciente telaBuscarPaciente;
    private final AgendamentoController agendamentoController;
    private final Color corAgendamentoOcupado;
    private final Color corAgendamentoLivre;
    
    private String[][] matrizAgendamento;

    private int idPacienteOrigem;
    private Date dataAgendamentoOrigem;
    private int idAgendamentoOrigem;
    private Time horaAgendamentoOrigem;
    private int idMedicoOrigem;
    
    private TelaConsulta telaConsulta;
    
    
    public TelaAgendamento() {
        initComponents();
        telaBuscarPaciente = new TelaBuscarPaciente();
        agendamentoController = new AgendamentoController();

        corAgendamentoOcupado = new Color(250, 124, 124);
        corAgendamentoLivre = new Color(124, 250, 124);
    }
    
    public void mostraTelaModoReagendamento() {
        txtTitulo.setText("EDITAR AGENDAMENTO");
        panelReagendamento.setVisible(true);
        panelAgendamento.setVisible(false);
        btnBuscar.setVisible(false);
        txtHorario.setVisible(true);
        inputHorario.setVisible(true);
        txtMedico.setVisible(true);
        inputMedico.setVisible(true);
        inputData.setVisible(true);
        txtDataOrigem.setVisible(true);
        
        setVisible(true);
    }
    
    public void mostraTelaModoAgendamento() {
        txtTitulo.setText("AGENDAR CONSULTA");
        panelAgendamento.setVisible(true);
        panelReagendamento.setVisible(false);
        btnBuscar.setVisible(true);
        txtHorario.setVisible(false);
        inputHorario.setVisible(false);
        txtMedico.setVisible(false);
        inputMedico.setVisible(false);
        inputData.setVisible(false);
        txtDataOrigem.setVisible(false);

        setVisible(true);
    }

    private void limpaTelaAgendamento(){
        inputNomePaciente.setText("");
        inputDataNascimento.setText("");
    }
    
    // verifica se o paciente tem agendamento no mesmo dia e mesmo horário
    private boolean isAgendamentoLivreParaPaciente(String horarioAgendamento, String nomePaciente){
        for (int i = 0; i < matrizAgendamento.length; i++) {
            String[] row = matrizAgendamento[i];
            String horario = row[HORARIO.ordinal()];
            String nome = row[NOME_PACIENTE.ordinal()];

            if (horarioAgendamento.equals(horario) && nomePaciente.equals(nome)) {
                return false;               
            }
        }
        return true;
    }
    
    // verifica se tem agendamento marcado na linha selecionada
    private boolean isAgendamentoOcupado(int row) {
        if (matrizAgendamento == null || matrizAgendamento.length < row) {
            return false;
        }
        
        String nome = matrizAgendamento[row][NOME_PACIENTE.ordinal()];
        if (nome == null || nome.equals("")) {
            return false;
        }

        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtTituloMedico = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txtData = new javax.swing.JLabel();
        calendarDataAgendamento = new com.toedter.calendar.JDateChooser();
        panelDadosReagendamento = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaAgendamentos = new javax.swing.JTable()
        {
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column)
            {
                Component c = super.prepareRenderer(renderer, row, column);

                //  Alternate row color

                //getBackground()
                if (!isRowSelected(row))
                c.setBackground(isAgendamentoOcupado(row) ? corAgendamentoOcupado : corAgendamentoLivre);

                return c;
            }
        };
        panelAgendamento = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnAgendar = new javax.swing.JButton();
        btnFechar = new javax.swing.JButton();
        panelReagendamento = new javax.swing.JPanel();
        btnCancelarReagendamento = new javax.swing.JButton();
        btnReagendar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnFecharReagendamento = new javax.swing.JButton();
        panelDadosDaConsulta = new javax.swing.JPanel();
        inputNomePaciente = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        txtPaciente = new javax.swing.JLabel();
        inputDataNascimento = new javax.swing.JFormattedTextField();
        txtDataNascimento = new javax.swing.JLabel();
        txtHorario = new javax.swing.JLabel();
        txtMedico = new javax.swing.JLabel();
        inputHorario = new javax.swing.JTextField();
        inputMedico = new javax.swing.JTextField();
        txtDataOrigem = new javax.swing.JLabel();
        inputData = new javax.swing.JTextField();
        painelImagemFundo2 = new view.PainelImagemFundo();
        txtTitulo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        txtTituloMedico.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        txtTituloMedico.setText("Cadastro Médico");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Agendamento");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        txtData.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        txtData.setText("Data da Consulta");

        calendarDataAgendamento.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarDataAgendamentoPropertyChange(evt);
            }
        });

        panelDadosReagendamento.setBackground(new java.awt.Color(255, 255, 255));
        panelDadosReagendamento.setBorder(javax.swing.BorderFactory.createTitledBorder("AGENDA"));

        tabelaAgendamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Horário", "Médico", "Especialidade", "Consultório", "Nome"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaAgendamentos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabelaAgendamentos);

        javax.swing.GroupLayout panelDadosReagendamentoLayout = new javax.swing.GroupLayout(panelDadosReagendamento);
        panelDadosReagendamento.setLayout(panelDadosReagendamentoLayout);
        panelDadosReagendamentoLayout.setHorizontalGroup(
            panelDadosReagendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDadosReagendamentoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );
        panelDadosReagendamentoLayout.setVerticalGroup(
            panelDadosReagendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDadosReagendamentoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelAgendamento.setBackground(new java.awt.Color(255, 255, 255));

        btnCancelar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAgendar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAgendar.setText("Agendar");
        btnAgendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgendarActionPerformed(evt);
            }
        });

        btnFechar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAgendamentoLayout = new javax.swing.GroupLayout(panelAgendamento);
        panelAgendamento.setLayout(panelAgendamentoLayout);
        panelAgendamentoLayout.setHorizontalGroup(
            panelAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAgendamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnFechar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addComponent(btnCancelar)
                .addGap(95, 95, 95)
                .addComponent(btnAgendar))
        );
        panelAgendamentoLayout.setVerticalGroup(
            panelAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAgendamentoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnAgendar)
                    .addComponent(btnFechar))
                .addGap(1, 1, 1))
        );

        panelReagendamento.setBackground(new java.awt.Color(255, 255, 255));

        btnCancelarReagendamento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCancelarReagendamento.setText("Cancelar");
        btnCancelarReagendamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarReagendamentoActionPerformed(evt);
            }
        });

        btnReagendar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnReagendar.setText("Reagendar");
        btnReagendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReagendarActionPerformed(evt);
            }
        });

        btnExcluir.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnFecharReagendamento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnFecharReagendamento.setText("Fechar");
        btnFecharReagendamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharReagendamentoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelReagendamentoLayout = new javax.swing.GroupLayout(panelReagendamento);
        panelReagendamento.setLayout(panelReagendamentoLayout);
        panelReagendamentoLayout.setHorizontalGroup(
            panelReagendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReagendamentoLayout.createSequentialGroup()
                .addComponent(btnFecharReagendamento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(btnCancelarReagendamento)
                .addGap(66, 66, 66)
                .addComponent(btnExcluir)
                .addGap(47, 47, 47)
                .addComponent(btnReagendar))
        );
        panelReagendamentoLayout.setVerticalGroup(
            panelReagendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReagendamentoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelReagendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarReagendamento)
                    .addComponent(btnReagendar)
                    .addComponent(btnExcluir)
                    .addComponent(btnFecharReagendamento)))
        );

        panelDadosDaConsulta.setBackground(new java.awt.Color(255, 255, 255));
        panelDadosDaConsulta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        inputNomePaciente.setEditable(false);
        inputNomePaciente.setBackground(new java.awt.Color(255, 255, 255));
        inputNomePaciente.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        btnBuscar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/lupa.png"))); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        txtPaciente.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        txtPaciente.setText("Paciente");

        inputDataNascimento.setEditable(false);
        inputDataNascimento.setBackground(new java.awt.Color(255, 255, 255));
        inputDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        inputDataNascimento.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        txtDataNascimento.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        txtDataNascimento.setText("Data de Nascimento");

        txtHorario.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        txtHorario.setText("Horário");

        txtMedico.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        txtMedico.setText("Médico");

        inputHorario.setEditable(false);
        inputHorario.setBackground(new java.awt.Color(255, 255, 255));
        inputHorario.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        inputMedico.setEditable(false);
        inputMedico.setBackground(new java.awt.Color(255, 255, 255));
        inputMedico.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        txtDataOrigem.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        txtDataOrigem.setText("Data");

        inputData.setEditable(false);
        inputData.setBackground(new java.awt.Color(255, 255, 255));
        inputData.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout panelDadosDaConsultaLayout = new javax.swing.GroupLayout(panelDadosDaConsulta);
        panelDadosDaConsulta.setLayout(panelDadosDaConsultaLayout);
        panelDadosDaConsultaLayout.setHorizontalGroup(
            panelDadosDaConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDadosDaConsultaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDadosDaConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPaciente)
                    .addComponent(txtDataNascimento)
                    .addComponent(txtMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(panelDadosDaConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDadosDaConsultaLayout.createSequentialGroup()
                        .addComponent(inputMedico)
                        .addGap(119, 119, 119)
                        .addComponent(txtDataOrigem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputData, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHorario)
                        .addGap(18, 18, 18)
                        .addComponent(inputHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDadosDaConsultaLayout.createSequentialGroup()
                        .addGroup(panelDadosDaConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelDadosDaConsultaLayout.createSequentialGroup()
                                .addComponent(inputNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 787, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(172, 172, 172))))
        );
        panelDadosDaConsultaLayout.setVerticalGroup(
            panelDadosDaConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDadosDaConsultaLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(panelDadosDaConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDadosDaConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPaciente)
                        .addComponent(inputNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(panelDadosDaConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDataNascimento)
                    .addComponent(inputDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 19, Short.MAX_VALUE)
                .addGroup(panelDadosDaConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDadosDaConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtDataOrigem)
                        .addComponent(inputData, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelDadosDaConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMedico)
                        .addComponent(inputMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtHorario)
                        .addComponent(inputHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        painelImagemFundo2.setImg(new ImageIcon("src/imagemFundo/imagem_fundo2.png"));

        txtTitulo.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        txtTitulo.setForeground(new java.awt.Color(102, 102, 102));
        txtTitulo.setText("AGENDAMENTO");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/logo2.png"))); // NOI18N

        javax.swing.GroupLayout painelImagemFundo2Layout = new javax.swing.GroupLayout(painelImagemFundo2);
        painelImagemFundo2.setLayout(painelImagemFundo2Layout);
        painelImagemFundo2Layout.setHorizontalGroup(
            painelImagemFundo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelImagemFundo2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelImagemFundo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTitulo)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelImagemFundo2Layout.setVerticalGroup(
            painelImagemFundo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelImagemFundo2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(txtTitulo))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(calendarDataAgendamento, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(panelDadosReagendamento, javax.swing.GroupLayout.PREFERRED_SIZE, 1237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(panelDadosDaConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(724, 724, 724)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(panelReagendamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelAgendamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(32, Short.MAX_VALUE))
            .addComponent(painelImagemFundo2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(painelImagemFundo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(panelDadosDaConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calendarDataAgendamento, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addComponent(panelDadosReagendamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(panelAgendamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelReagendamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    //recebe dados do paciente da TelaBuscaPaciente no modo novo agendamento
    public void recebeDadosPaciente(int idPaciente, String nome, String dataNascimento) {
        this.idPacienteOrigem = idPaciente;  
        inputNomePaciente.setText(nome);
        inputDataNascimento.setText(dataNascimento);
    }
    
    //recebe dados do paciente da TelaConsulta no modo edição agendamento
    public void recebeDadosPaciente(
            String nome,
            String dataNascimento,
            String horario,
            Date dataAgendamento,
            int idMedico,
            String medico,
            String consultorio,
            int idAgendamento,
            int idPaciente,
            TelaConsulta telaConsulta
    ) {
        recebeDadosPaciente(idPaciente, nome, dataNascimento);
        
        this.idAgendamentoOrigem = idAgendamento;
        horaAgendamentoOrigem = Time.valueOf(horario);
        this.idMedicoOrigem = idMedico;
        
        this.telaConsulta = telaConsulta;
        
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");  
        
        inputData.setText(dateFormat.format(dataAgendamento));
        inputHorario.setText(horario);
        inputMedico.setText(medico);
        calendarDataAgendamento.setDate(dataAgendamento);
        this.dataAgendamentoOrigem = dataAgendamento;
    } 
    
    // buscar nome paciente 
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        telaBuscarPaciente.mostrar(this);
    }//GEN-LAST:event_btnBuscarActionPerformed
    
    // atualiza a tabela 
    private void atualizaTabela() {
        Date dataCalendario = calendarDataAgendamento.getDate();
        String[][] agendamentos = agendamentoController.getAgendamentosByDate(dataCalendario);
        preencheTabela(agendamentos);   
    }
    
    private void limpaTabela() {
        // inicializa a matriz  com strings vazias.
        int rows = 10;
        int cols = 10;
        String[][] matrizVazia = new String[rows][cols];

        // fazer "for" que passa por todas as linhas e seta uma String vazia na  coluna.
        for (int i = 0; i < matrizVazia.length; i++) {
            matrizVazia[i][0] = "";
            matrizVazia[i][1] = "";
            matrizVazia[i][2] = "";
            matrizVazia[i][3] = "";
            matrizVazia[i][4] = "";
            matrizVazia[i][5] = "";
            matrizVazia[i][6] = "";
            matrizVazia[i][7] = "";
            matrizVazia[i][8] = "";
            matrizVazia[i][9] = "";
        }
        preencheTabela(matrizVazia);
    }
        
    // método para preencher a tabela com os agendamentos
    private void preencheTabela(String[][] matrizAgendamento) {
        DefaultTableModel modelo = (DefaultTableModel) this.tabelaAgendamentos.getModel();
        modelo.setNumRows(0);
        
        for (int i = 0; i < matrizAgendamento.length; i++) {
            modelo.addRow(new Object[]{
                    matrizAgendamento[i][HORARIO.ordinal()],
                    matrizAgendamento[i][NOME_MEDICO.ordinal()],
                    matrizAgendamento[i][ESPECIALIDADE.ordinal()],
                    matrizAgendamento[i][CONSULTORIO.ordinal()],
                    matrizAgendamento[i][NOME_PACIENTE.ordinal()],
            });
        }

        this.matrizAgendamento = matrizAgendamento;
    }
    
    // pega data seleciona e atualiza a tabela
    private void calendarDataAgendamentoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarDataAgendamentoPropertyChange
        if (calendarDataAgendamento.getDate() == null) {
            return;
        }
        atualizaTabela();       
    }//GEN-LAST:event_calendarDataAgendamentoPropertyChange

    // criar agendamento de consulta (modo novo agendamento) 
    private void btnAgendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgendarActionPerformed
        boolean isSucesso = criarAgendamento();
        
        if (isSucesso) {
            JOptionPane.showMessageDialog(null, "Agendamento cadastrado com sucesso!");
            atualizaTabela();
            limpaTelaAgendamento();
        }
    }

    private boolean criarAgendamento() {
        if (idPacienteOrigem <= 0){
            JOptionPane.showMessageDialog(null, "Selecione um paciente!");
            return false;
        }
        
        int idRow = this.tabelaAgendamentos.getSelectedRow();
        if (idRow < 0) {
            JOptionPane.showMessageDialog(null, "Selecione um horário disponível!");
            return false;
        } 
        
        if (isAgendamentoOcupado(idRow)){
            JOptionPane.showMessageDialog(null, "Data com agendamento marcado! Selecione outra data!");
            return false;
        }

        String[] dadosSelecionados = matrizAgendamento[idRow];
              
        String idRowMedico = dadosSelecionados[ID_MEDICO.ordinal()];
        int idMedicoSelecionado = Integer.parseInt(idRowMedico);
        
        String horario = dadosSelecionados[HORARIO.ordinal()];
        Time horarioSelecionado = Time.valueOf(horario);
        
        Date dataAgendaConsulta = calendarDataAgendamento.getDate();
        String nomePacinete = inputNomePaciente.getText();
                
        boolean agendamentoLivre = isAgendamentoLivreParaPaciente(horario, nomePacinete);   
        if (agendamentoLivre != true) {
            JOptionPane.showMessageDialog(null, "Paciente com agendamento marcado no mesmo horário!");
            return false;
        } 
        
        agendamentoController.cadastrarAgendamento(dataAgendaConsulta, horarioSelecionado, idMedicoSelecionado, idPacienteOrigem);

        return true;
    }//GEN-LAST:event_btnAgendarActionPerformed

    // btn cancelar modo agendamento
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnCancelarActionPerformed
    
    // btn cancelar modo edição do agendamento
    private void btnCancelarReagendamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarReagendamentoActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnCancelarReagendamentoActionPerformed
    
    // btn excluir modo edição do agendamento
    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int respostaUsuario = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja APAGAR este Agendamento?");
        if (respostaUsuario != 0) {
            return;
        } 

        boolean isSucesso = agendamentoController.apagarAgendamento(idAgendamentoOrigem);
        if (isSucesso) {
            atualizaTabela();
            
            // fazer os cleanups dos componentes que tem a info do agendamento. setText("")
            
            JOptionPane.showMessageDialog(rootPane, "Agendamento apagado com sucesso");
            retornaParaTelaConsulta();
        }
    }//GEN-LAST:event_btnExcluirActionPerformed
    
    // btn reagendar modo edição do agendamento 
    private void btnReagendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReagendarActionPerformed
        int idRow = this.tabelaAgendamentos.getSelectedRow();
        if (idRow < 0) {
            JOptionPane.showMessageDialog(null, "Selecione um horário para reagendamento");
            return;
        }        

        String[] dadosSelecionados = matrizAgendamento[idRow];
        String horarioTxt = dadosSelecionados[HORARIO.ordinal()];
        String nomePaciente = inputNomePaciente.getText();

        //verifica se o paciente deseja realizar o reagendamento já possui agendamento no mesmo dia e horário (no outro consultório)
        boolean agendamentoLivre = isAgendamentoLivreParaPaciente(horarioTxt, nomePaciente);       
        if (agendamentoLivre != true) {
            JOptionPane.showMessageDialog(null, "Este paciente possui agendamento marcado no mesmo horário! \n Selecione um novo horário!");
            return;
        } 
        
        // verifica se linha destn tem paciente
        String nomePacienteDadosSelecionados = dadosSelecionados[NOME_PACIENTE.ordinal()];
        if (nomePacienteDadosSelecionados == null || nomePacienteDadosSelecionados.equals("")) { 
            reagendar();
        }
        else {
            swap();
        }
    }//GEN-LAST:event_btnReagendarActionPerformed
    
    // método para reagendar uma consulta para o mesmo paciente
    private void reagendar() {
        int respostaUsuario = JOptionPane.showConfirmDialog(null, "Deseja alterar o horário deste paciente?");
        if (respostaUsuario != 0) {
            return;
        }

        boolean isSucesso = criarAgendamento();
        if (isSucesso != true) {
            JOptionPane.showMessageDialog(null, "Não foi possível reagendar neste momento.");
            return;
        }
        
        agendamentoController.apagarAgendamento(idAgendamentoOrigem);
        
        int idRow = this.tabelaAgendamentos.getSelectedRow();
        String[] dadosSelecionados = matrizAgendamento[idRow];
        
        String horario = dadosSelecionados[HORARIO.ordinal()];
        
        Date dataAgendaConsulta = calendarDataAgendamento.getDate();

        String nomeMedico = dadosSelecionados[NOME_MEDICO.ordinal()];
        
        inputData.setText(formataData(dataAgendaConsulta));
        inputHorario.setText(horario);
        inputMedico.setText(nomeMedico);

        atualizaTabela();
        
        JOptionPane.showMessageDialog(null, "Reagendamento realizado com sucesso!");
        
        retornaParaTelaConsulta();
    }
    
    private String formataData(Date data) {
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        return dateFormat.format(data);
    }
    
    private void retornaParaTelaConsulta() {
        telaConsulta.atualizaTabelaAgendaDaData();
        setVisible(false);
    }
    
    // método para fazer remanejamento de consulta entre dois pacientes
    private void swap() {
        int respostaUsuario = JOptionPane.showConfirmDialog(null, "Horário selecionado possui agendamento. Deseja alterar este agendamento?");
        if (respostaUsuario != 0) {
            return;
        }
            
        int idRow = this.tabelaAgendamentos.getSelectedRow();
        String[] dadosSelecionados = matrizAgendamento[idRow];
        
        //salva os dados do slot selecionado em variáveis no próprio método (dados do paciente destino)   
        String horario = dadosSelecionados[HORARIO.ordinal()];
        Time horaDestn = Time.valueOf(horario);
               
        int idMedicoDestn = Integer.parseInt(dadosSelecionados[ID_MEDICO.ordinal()]);
        int idAgendamentoDestn = Integer.parseInt(dadosSelecionados[ID_AGENDAMENTO.ordinal()]);
        Date dataDestn = calendarDataAgendamento.getDate();
        
        int idPacienteDestn = Integer.parseInt(dadosSelecionados[ID_PACIENTE.ordinal()]);
        
        //delete o agendamento que está nesse slot de destino (pelo id agendamento)
        agendamentoController.apagarAgendamento(idAgendamentoDestn);

        //tem que criar um agendamento nesse slot com os dados do agendamento de origem
        agendamentoController.cadastrarAgendamento(dataDestn, horaDestn, idMedicoDestn, idPacienteOrigem);
        
        // o agendamento de origem está duplicado, no slot original e de destino. Então você deleta o agendamento de origem no slot de origem
        agendamentoController.apagarAgendamento(idAgendamentoOrigem);
                  
        // o slot de origem está liberado. Então finalmente você cria um novo agendamento usando os dados salvos no primeiro passo
        agendamentoController.cadastrarAgendamento(dataAgendamentoOrigem, horaAgendamentoOrigem, idMedicoOrigem, idPacienteDestn);
        
        String nomeMedico = dadosSelecionados[NOME_MEDICO.ordinal()];
        inputMedico.setText(nomeMedico);
        
        inputData.setText(formataData(dataDestn));
        inputHorario.setText(horaDestn.toString());

        atualizaTabela();
        JOptionPane.showMessageDialog(null, "Reagendamento realizado com sucesso!");
        retornaParaTelaConsulta();
    }
    
    // btn fechar modo novo agendamento
    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnFecharActionPerformed
    
    // btn fechar modo edição agendamento
    private void btnFecharReagendamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharReagendamentoActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnFecharReagendamentoActionPerformed
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaAgendamento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgendar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCancelarReagendamento;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnFechar;
    private javax.swing.JButton btnFecharReagendamento;
    private javax.swing.JButton btnReagendar;
    private com.toedter.calendar.JDateChooser calendarDataAgendamento;
    private javax.swing.JTextField inputData;
    private javax.swing.JFormattedTextField inputDataNascimento;
    private javax.swing.JTextField inputHorario;
    private javax.swing.JTextField inputMedico;
    private javax.swing.JTextField inputNomePaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private view.PainelImagemFundo painelImagemFundo2;
    private javax.swing.JPanel panelAgendamento;
    private javax.swing.JPanel panelDadosDaConsulta;
    private javax.swing.JPanel panelDadosReagendamento;
    private javax.swing.JPanel panelReagendamento;
    private javax.swing.JTable tabelaAgendamentos;
    private javax.swing.JLabel txtData;
    private javax.swing.JLabel txtDataNascimento;
    private javax.swing.JLabel txtDataOrigem;
    private javax.swing.JLabel txtHorario;
    private javax.swing.JLabel txtMedico;
    private javax.swing.JLabel txtPaciente;
    private javax.swing.JLabel txtTitulo;
    private javax.swing.JLabel txtTituloMedico;
    // End of variables declaration//GEN-END:variables
}
